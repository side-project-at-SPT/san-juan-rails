require 'swagger_helper'

RSpec.describe 'Api::V1::Game', type: :request do
  path '/api/v1/game' do
    post 'Create a new game' do
      tags 'Game'
      description <<~DESC
        Limitations:
        - (Required) Provide a username as the creator of the game
        - The game name is generated by the server
      DESC
      consumes 'application/json'
      parameter name: :payload, in: :body, schema: {
        type: :object,
        properties: {
          username: { type: :string }
        },
        required: [ 'username' ]
      }

      response '201', 'game created' do
        let(:payload) { { username: 'player1' } }

        run_test! do |response|
          data = JSON.parse(response.body)
          expect(data['game_id']).to be_an(Integer)

          created_game = Game.find(data['game_id'])
          expect(created_game.players.pluck(:username)).to eq([ 'player1' ])
          expect(created_game.name).to be_present
          expect(created_game.status).to eq('waiting')
          expect(created_game.game_players.last.ready?).to be_falsey
        end
      end

      response '422', 'invalid request' do
        let(:payload) { { username: '' } }
        run_test!
      end
    end
  end

  path '/api/v1/game/{id}/players' do
    put 'Join a game' do
      tags 'Game'
      description <<~DESC
        Limitations:
        - (Required) Provide a username as the player who joins the game
      DESC
      consumes 'application/json'
      parameter name: :id, in: :path, type: :integer
      parameter name: :payload, in: :body, schema: {
        type: :object,
        properties: {
          username: { type: :string }
        },
        required: [ 'username' ]
      }

      let(:game) { Game.create(name: 'game1') }
      let(:id) { game.id }

      response '204', 'player joined game' do
        let(:user) { Player.create(username: 'player1') }
        let(:payload) { { username: 'player1' } }

        run_test! do |response|
          expect(response.body).to be_empty

          expect(game.players.pluck(:username)).to eq([ 'player1' ])
          expect(game.game_players.last.ready?).to be_falsey
        end
      end

      response '422', 'invalid request' do
        let(:payload) { { username: '' } }
        run_test!
      end
    end
  end

  path '/api/v1/game/{id}/ready' do
    put 'Set player ready' do
      tags 'Game'
      description <<~DESC
        Limitations:
        - (Required) Provide a username as the player who sets ready
      DESC
      consumes 'application/json'
      parameter name: :id, in: :path, type: :integer
      parameter name: :payload, in: :body, schema: {
        type: :object,
        properties: {
          username: { type: :string }
        },
        required: [ 'username' ]
      }

      let(:game) { Game.create(name: 'game1') }
      let(:id) { game.id }
      let(:user) { Player.create(username: 'player1') }

      response '204', 'player set ready' do
        let(:payload) { { username: 'player1' } }
        before do
          game.players << user
        end

        run_test! do |response|
          expect(response.body).to be_empty

          expect(game.game_players.last.ready?).to be_truthy
        end
      end

      response '404', 'game not found' do
        let(:id) { 0 }
        let(:payload) { nil }
        run_test!
      end

      response '422', 'you are not in this game' do
        let(:payload) { { username: 'player2' } }
        run_test!
      end
    end
  end
end
